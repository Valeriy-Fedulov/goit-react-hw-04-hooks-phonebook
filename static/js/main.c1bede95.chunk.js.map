{"version":3,"sources":["components/contactform/ContactForm.module.css","components/contact/Contact.module.css","components/filter/Filter.module.css","components/contactform/ContactForm.js","components/contact/Contact.js","components/contactlist/ContactList.js","components/filter/Filter.js","App.js","index.js"],"names":["module","exports","ContactForm","props","useState","name","setName","number","setNumber","className","s","form","onSubmit","e","preventDefault","contacts","find","contact","alert","id","uuidv4","input","type","pattern","title","required","value","onChange","currentTarget","button","Contact","deleteContact","map","list","onClick","ContactList","Filter","filter","setFilter","App","setContacts","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","data","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c1bede95.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__15_C6\",\"input\":\"ContactForm_input__5U5De\",\"button\":\"ContactForm_button__2bcWB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__2_2Uc\",\"button\":\"Contact_button__jYwrt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3K0YO\"};","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm(props) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (props.contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      props.onSubmit({\n        id: uuidv4(),\n        name: name,\n        number: number,\n      });\n      reset();\n    }\n  }\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={e => {\n            setName(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={e => {\n            setNumber(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n};\n\nexport { ContactForm };\n","import PropTypes from \"prop-types\";\nimport s from \"./Contact.module.css\";\n\nconst Contact = ({ contacts, deleteContact }) => (\n  <>\n    {contacts.map((contact) => (\n      <li className={s.list} key={contact.id}>\n        {contact.name}: {contact.number}\n        <button\n          className={s.button}\n          type=\"button\"\n          onClick={() => deleteContact(contact.id)}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </>\n);\n\nContact.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport { Contact };\n","import { Contact } from \"../contact\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    <Contact contacts={contacts} deleteContact={deleteContact} />\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n};\n\nexport { ContactList };\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ filter, setFilter }) => (\n  <label>\n    Find contacts by name\n    <input\n      className={s.input}\n      type=\"text\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={filter}\n      onChange={e => setFilter(e.currentTarget.value)}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport { Filter };\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nimport { ContactForm } from './components/contactform';\nimport { ContactList } from './components/contactlist';\nimport { Filter } from './components/filter';\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.getItem('contacts') &&\n      setContacts(JSON.parse(localStorage.getItem('contacts')));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  function formSubmitHandler(data) {\n    setContacts([...contacts, data]);\n  }\n\n  function getVisibleContacts() {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  }\n\n  function deleteContact(contactId) {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  }\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} onSubmit={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} setFilter={setFilter} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        deleteContact={deleteContact}\n      />\n    </>\n  );\n}\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape),\n  filter: PropTypes.string,\n};\n\nexport { App };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}